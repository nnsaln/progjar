#include <stdio.h>
#include <errno.h> 
#include <sys/types.h>
#include <sys/stat.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX_CMD_SIZE 100
#define MAX_INFO 1024

int control_sockinit, data_sockinit, retrnval;
char control_info[MAX_INFO];
char data_info[MAX_INFO];
char tmp[MAX_CMD_SIZE];
char ftp_cmd[MAX_CMD_SIZE];
char nama_file[MAX_CMD_SIZE]; 
char curr_cmd[50];



struct sockaddr_in get_Server_Data_Port()  
{     
        struct sockaddr_in dataSock;  
         char *ci;  
         char ip[16];  
         char cport[4];  
         int port;  
         int flag=0;   
         int ipnum=0;  
         int ipt=0;  
         int portnum=0;  
         int portt=0;  
         for (ci =control_info; *ci != '\0'; ++ci)  
          {  
            if(flag==2)  
            {  
                if(*ci==','||*ci==')')  
                {  
                    cport[portnum]='\0';  
                    port=port*portt+atoi(cport);  
                    portt=256;  
                    portnum=0;  
                }  
                else if(*ci!=',')  
                {  
                    cport[portnum]=*ci;  
                    portnum++;  
                }  
            }  
            if(flag==1)  
            {  
                if(*ci!=',')  
                {  
                    ip[ipnum]=*ci;  
                }  
                else   
                {  
                    ipt++;  
                    if(ipt<4)ip[ipnum]='.';    
                    else   
                    {  
                        flag=2;  
                        ip[ipnum]='\0';  
                    }  
                }  
                ipnum++;  
            }  
            if(*ci=='(')flag=1;  
            if(*ci==')')break;  
          }  

        bzero(&dataSock, sizeof(dataSock));  
         dataSock.sin_family = AF_INET;  
         dataSock.sin_port = htons(port);  
         if(inet_pton(AF_INET,ip, &dataSock.sin_addr)<=0)  
          {  
            printf("IP address invalid!\n");  
            exit(-1);  
         }  
         return dataSock;  
} 


void do_control_cmd(char ftp_cmd[MAX_CMD_SIZE], int len)
{
	ftp_cmd[len-1] = '\r';
	ftp_cmd[len] = '\n';
	ftp_cmd[len+1] = '\0';
	//fputs(ftp_cmd,stdout);
	if ((retrnval = write(control_sockinit, ftp_cmd, strlen(ftp_cmd))) < 0)
			printf("Gagal mengirim pesan\n");
	memset(control_info, 0, MAX_INFO);
	if ((retrnval = read(control_sockinit, control_info, sizeof(control_info))) < 0)
			printf("Gagal membaca pesan\n");
	fputs(control_info, stdout);
}

void do_data_init()
{
	struct sockaddr_in data_Temp_addr=get_Server_Data_Port();
	if ((data_sockinit=socket(AF_INET,SOCK_STREAM,0))==-1)
	{   
		fprintf(stderr,"Socket Create Error:%s\a\n",strerror(errno));  
		exit(1);   
	}  
	if(connect(data_sockinit, (struct sockaddr*)(&data_Temp_addr), sizeof(struct sockaddr_in)) < 0)  
	{  
		printf("Gagal Berhubungan\n");  
		exit(-1);  
	}
}

int main(int argc, char *argv[])
{	
	struct sockaddr_in servraddr;
	servraddr.sin_family = AF_INET;
	servraddr.sin_port = htons(21);
	inet_aton(argv[1], &servraddr.sin_addr);

	/*-----------------------init-------------------*/
	control_sockinit = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (control_sockinit < 0) 
	{
		printf("Gagal membuat socket\n");
		exit(1);
	}
	retrnval = connect(control_sockinit, (struct sockaddr *) &servraddr, sizeof(servraddr));
	if (retrnval < 0)
	{
		printf("Gagal membuat koneksi\n");
		exit(1);
	}
	read(control_sockinit, control_info, sizeof(control_info));
	fputs(control_info, stdout);
	/*--------------------akhir init------------------*/

	/*------------------- autentikasi -------------------*/
	memset(ftp_cmd, 0, MAX_CMD_SIZE);	
	printf("ftpSIP> ");
	fgets(ftp_cmd, MAX_CMD_SIZE, stdin);
	do_control_cmd(ftp_cmd, strlen(ftp_cmd));
	memset(ftp_cmd, 0, MAX_CMD_SIZE);	
	printf("ftpSIP> ");
	fgets(ftp_cmd, MAX_CMD_SIZE, stdin);
	do_control_cmd(ftp_cmd, strlen(ftp_cmd));
	/*-----------------akhir autentikasi-----------------*/

	while(1)
	{
		memset(ftp_cmd, 0, MAX_CMD_SIZE);
		printf("ftpSIP> ");
		fgets(ftp_cmd, MAX_CMD_SIZE, stdin);

		/*---------------LIST-----------------*/
		if(strncmp(ftp_cmd,"list",4) == 0)
		{	
			strcpy(curr_cmd, "pasv\r\n");
			do_control_cmd(curr_cmd, strlen(curr_cmd));			
			do_data_init();	 
			strcpy(curr_cmd, "list\r\n");
			do_control_cmd(curr_cmd, strlen(curr_cmd));			
			int cmd_sock = fileno(stdout);
			memset(data_info, 0, MAX_INFO);
			while((retrnval = read(data_sockinit, data_info, MAX_INFO)) > 0)
			{
				 if (write(cmd_sock, data_info, retrnval) != retrnval)  
				 {  
				 	printf("Gagal Membaca Pesan\n");  
				 	return;  
				 } 
			}	
			memset(control_info, 0,  MAX_INFO);
			read(control_sockinit, control_info, MAX_INFO);
			fputs(control_info,stdout);
			close(data_sockinit);
		}
		/*----------------------------akhir LIST------------------------------*/

		/*---------------------------RETR-------------------------------------*/
		else if (strncmp("retr", ftp_cmd, 4) == 0)  
            	{  
			printf("awal retr\n");
			int s=0, idx=0;   
                   	int length=strlen(ftp_cmd);   
			
                    	for(s=5;s<=length-2;s++)  
                   	{                          
                        	nama_file[idx]=ftp_cmd[s];
				idx++;  
                    	}  
                   		nama_file[idx]='\0';  
			fputs(ftp_cmd, stdout); fputs(nama_file, stdout);
			printf("hai");
			char pasv_cmd_retr[7]="pasv\r\n";
			int panjang;  
			if(strlen(pasv_cmd_retr)!=0)  
			{  
			panjang = write(control_sockinit, pasv_cmd_retr, strlen(pasv_cmd_retr));  
			    printf("%d bytes writen %s\n", panjang, pasv_cmd_retr);  
			}  
			  
			memset(control_info, 0, MAX_INFO);     
			int b;  
			if((b=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			}  
			control_info[b]='\0';  
			printf("Server Message:\n%s\n",control_info); 
			printf("pasv selesai, mulai konek data chanel\n");
			struct sockaddr_in data_Temp_addr_retr=get_Server_Data_Port();

			int data_sockinit_retr;
			fputs(ftp_cmd, stdout); fputs(nama_file, stdout);
			if ((data_sockinit_retr=socket(AF_INET,SOCK_STREAM,0))==-1)
			{   
			    fprintf(stderr,"Socket Create Error:%s\a\n",strerror(errno));  
			    exit(1);   
			}  
		       if(connect(data_sockinit_retr, (struct sockaddr*)(&data_Temp_addr_retr), sizeof(struct sockaddr_in)) < 0)  
			{  
			    printf("Gagal Berhubungan\n");  
			    exit(-1);  
			} 
			printf("udah konek data chanel, mulai type\n");
			char type_cmd[9]="TYPE I\r\n";  
		       //get_Server_Control_Info(type_cmd,strlen(type_cmd));  
			int panretr;  
			if(strlen(type_cmd)!=0)  
			{  
			panretr = write(control_sockinit, type_cmd, strlen(type_cmd));  
			    printf("%d bytes writen %s\n", panretr,type_cmd);  
			}  
			  
			memset(control_info, 0, MAX_INFO);     
			int bytes;  
			if((bytes=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			}  
			control_info[bytes]='\0';  
			printf("Server Message:\n%s\n",control_info); 
			fputs(ftp_cmd, stdout); fputs(nama_file, stdout);
			printf("type selesai, masukan retr kembali\n");
			//get_Server_Control_Info(cmd,strlen(cmd)); 
			int pancmd;  
			if(strlen(ftp_cmd)!=0)  
			{  
			pancmd = write(control_sockinit, ftp_cmd, strlen(ftp_cmd));  
			    printf("%d bytes writen %s\n", pancmd,ftp_cmd);  
			}  
			
			printf("habis masukkan retr\n");
			memset(control_info, 0, MAX_INFO);     
			int dataretr;  
			if((dataretr=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			}  
			control_info[dataretr]='\0';  
			printf("Server Message:\n%s\n",control_info);  
		         
			fputs(ftp_cmd, stdout); fputs(nama_file, stdout);
                    	printf("buka file\n");
		       	FILE* fp = fopen(nama_file, "ab");  
		        if (fp == NULL)  
		            {  
		                printf("open file %s error\n",nama_file);  
		                return;  
		            }  
			printf("udah di sini coy\n");
			fputs(ftp_cmd, stdout); fputs(nama_file, stdout);		        
			int cmd_sock=fileno(fp);  
		        int retvget;   
		        memset(data_info, 0, MAX_INFO);    
		        while ((retvget = read(data_sockinit_retr, data_info, MAX_INFO)) > 0)  
		        {  
				//fputs(data_info,stdout); 
		                if (write(cmd_sock, data_info, retvget) != retvget)  
		                    {  
		                    printf("Gagal Membaca Pesan\n");  
		                    return;  
		                 }  
		        }  
			printf("selesai tulis ke file\n");
		        fclose(fp);  
		        close(data_sockinit);  
		        //get_Server_Control_Info(cmd,0);  
			printf("file ditutup\n");
			memset(control_info, 0, MAX_INFO);     
			int bytescmd;  
			if((bytescmd=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			}  
			control_info[bytescmd]='\0';  
			printf("Server Message:\n%s\n",control_info);  
		        char transter[]="226 ";  
		        while(strstr(control_info,transter)==NULL)  
		        {

				memset(control_info, 0, MAX_INFO);     
				int bytescmd2;  
				if((bytescmd2=recv(control_sockinit,control_info,MAX_INFO,0))<=1)  
				{  
				    printf("recv error\n");  
				    continue; 
				}  
				control_info[bytescmd2]='\0';  
				printf("Server Message:\n%s\n",control_info);  

			} 
			printf("aksi terakhir retr\n");
		
            	}
		/*--------------------------akhir RETR--------------------------------*/

		/*--------------------------STOR--------------------------------------*/
		else if (strncmp("stor", ftp_cmd, 4) == 0)  
            	{  
			int s2=0, idx2=0;   
                   	int leng=strlen(ftp_cmd);      
                    	for(s2=5;s2<=leng-2;s2++)  
                   	{                          
                        	nama_file[idx2]=ftp_cmd[s2];
				idx2++;  
                    	}  
                   	nama_file[idx2]='\0';  
			strcpy(curr_cmd, "pasv\r\n");
			do_control_cmd(curr_cmd, strlen(curr_cmd));
			do_data_init();
		       	strcpy(curr_cmd, "TYPE I\r\n");  
		      	do_control_cmd(curr_cmd, strlen(curr_cmd));
		       	FILE* fp_stor = fopen(nama_file, "rb");  
		        if (fp_stor == NULL)  
		            {  
		                printf("open file %s error\r\n",nama_file);  
		                close(data_sockinit);  
		                return;  
		            }
  			do_control_cmd(ftp_cmd, strlen(ftp_cmd));
			int cmd_sock_stor=fileno(fp_stor);  
		        memset(data_info, 0, MAX_INFO);    
		        while ((retrnval = read(cmd_sock_stor, data_info, MAX_INFO)) > 0)  
		        {  
		                if (write(data_sockinit, data_info, retrnval) != retrnval)  
		                {  
		                    printf("read from server error in get_server_data\n");  
		                    return;  
		                }  
		        }  
		        fclose(fp_stor);  
		        close(data_sockinit);  
		        memset(control_info, 0, MAX_INFO);     
			if((retrnval=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			}  
			control_info[retrnval]='\0';  
			printf("Server Message:\n%s\n",control_info); 
			char transter_stor[]="226 ";  
		        while(strstr(control_info,transter_stor)==NULL)  
			{
				memset(control_info, 0, MAX_INFO);     
				if((retrnval=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
				{  
			    		printf("recv error\n");  
					exit(-1);  
				}  
			control_info[retrnval]='\0';  
			printf("Server Message:\n%s\n",control_info); 
		    	}  
		}
		/*--------------------------akhir STOR----------------------------------*/		
		else do_control_cmd(ftp_cmd, strlen(ftp_cmd));
		if(strncmp(ftp_cmd,"quit",4)==0) exit(0);
	}	
	return 0;
}
