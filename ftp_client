#include <stdio.h>
#include <errno.h> 
#include <sys/types.h>
#include <sys/stat.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

#define MAX_CMD_SIZE 100
#define MAX_INFO 1024

int main(int argc, char *argv[])
{
	int control_sockinit, retrnval, data_sockinit;
	struct sockaddr_in servraddr;

	servraddr.sin_family = AF_INET;
	servraddr.sin_port = htons(21);
	inet_aton(argv[1], &servraddr.sin_addr);

	char control_info[MAX_INFO];
	char data_info[MAX_INFO];
	char autentikasi[MAX_CMD_SIZE];
	char tmp[MAX_CMD_SIZE];
	char ftp_cmd[MAX_CMD_SIZE];
	
	/*-----------------------init-------------------*/
	control_sockinit = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (retrnval < 0) 
	{
		printf("Gagal membuat socket\n");
		exit(1);
	}
	retrnval = connect(control_sockinit, (struct sockaddr *) &servraddr, sizeof(servraddr));
	if (retrnval < 0)
	{
		printf("Gagal membuat koneksi\n");
		exit(1);
	}
	read(control_sockinit, control_info, sizeof(control_info));
	fputs(control_info, stdout);

	printf("Sudah konek\n");
	
	/*-----------------------init-------------------*/

	/*----------------------data_port-------------------*/
	struct sockaddr_in get_Server_Data_Port()  
    {     
        struct sockaddr_in dataSock;  
         char *ci;  
         char ip[16];  
         char cport[4];  
         int port;  
         int flag=0;   
         int ipnum=0;  
         int ipt=0;  
         int portnum=0;  
         int portt=0;  
         for (ci =control_info; *ci != '\0'; ++ci)  
          {  
            if(flag==2)  
            {  
                if(*ci==','||*ci==')')  
                {  
                    cport[portnum]='\0';  
                    port=port*portt+atoi(cport);  
                    portt=256;  
                    portnum=0;  
                }  
                else if(*ci!=',')  
                {  
                    cport[portnum]=*ci;  
                    portnum++;  
                }  
            }  
            if(flag==1)  
            {  
                if(*ci!=',')  
                {  
                    ip[ipnum]=*ci;  
                }  
                else   
                {  
                    ipt++;  
                    if(ipt<4)ip[ipnum]='.';    
                    else   
                    {  
                        flag=2;  
                        ip[ipnum]='\0';  
                    }  
                }  
                ipnum++;  
            }  
            if(*ci=='(')flag=1;  
            if(*ci==')')break;  
          }  

        bzero(&dataSock, sizeof(dataSock));  
         dataSock.sin_family = AF_INET;  
         dataSock.sin_port = htons(port);  
         if(inet_pton(AF_INET,ip, &dataSock.sin_addr)<=0)  
          {  
            printf("IP address invalid!\n");  
            exit(-1);  
         }  
         return dataSock;  
    }  
	
	/*----------------------data_port-------------------*/	

	/*----------------------data-------------------*/

	
	/*----------------------data-------------------*/
	while(1)
	{
		memset(autentikasi, 0, MAX_CMD_SIZE);
		memset(ftp_cmd, 0, MAX_CMD_SIZE);
		memset(tmp, 0, MAX_CMD_SIZE);
		
		printf("ftp> ");
		fgets(autentikasi, MAX_CMD_SIZE, stdin);
		int len = strlen(autentikasi);
		autentikasi[len-1] = '\0';
		strcpy(ftp_cmd, autentikasi);
		strcat(ftp_cmd,"\r\n");
		
		memset(control_info, 0, MAX_INFO);

		if ((retrnval = write(control_sockinit, ftp_cmd, strlen(ftp_cmd))) < 0)
			printf("Gagal mengirim pesan\n");
		
		if ((retrnval = read(control_sockinit, control_info, sizeof(control_info))) < 0)
			printf("Gagal membaca pesan\n");
		fputs(control_info, stdout);

		if(strncmp(ftp_cmd,"list",4) == 0)
		{	
			char pasv_cmd[7]="pasv\r\n";
			int pan;  
			if(strlen(pasv_cmd)!=0)  
			{  
			pan = write(control_sockinit, pasv_cmd, strlen(pasv_cmd));  
			    printf("%d bytes writen %s\n", pan, pasv_cmd);  
			}  
			  
			memset(control_info, 0, MAX_INFO);     
			int bytes;  
			if((bytes=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			}  
			control_info[bytes]='\0';  
			printf("Server Message:\n%s\n",control_info); 

			struct sockaddr_in data_Temp_addr=get_Server_Data_Port();
			int data_sockinit;
	
			if ((data_sockinit=socket(AF_INET,SOCK_STREAM,0))==-1)
			{   
			    fprintf(stderr,"Socket Create Error:%s\a\n",strerror(errno));  
			    exit(1);   
			}  
		       if(connect(data_sockinit, (struct sockaddr*)(&data_Temp_addr), sizeof(struct sockaddr_in)) < 0)  
			{  
			    printf("Gagal Berhubungan\n");  
			    exit(-1);  
			}  

			char list_cmd[7] = "list\r\n";
			int plist;  
			if(strlen(list_cmd)!=0)  
			{  
			plist = write(control_sockinit, list_cmd, strlen(list_cmd));  
			    printf("%d bytes writen %s\n", plist, list_cmd);  
			}  
			  
			memset(control_info, 0, MAX_INFO);     
			int byteslist;  
			if((byteslist=recv(control_sockinit,control_info,MAX_INFO,0))==-1)  
			{  
			    printf("recv error\n");  
			    exit(-1);  
			} 
 			
			control_info[byteslist]='\0';  
			printf("Server Message:\n%s\n",control_info); 

			int cmd_sock = fileno(stdout);
			int retvdata;
			memset(data_info, 0, MAX_INFO);
			while((retvdata = read(data_sockinit, data_info, MAX_INFO)) > 0)
			{
				 if (write(cmd_sock, data_info, retvdata) != retvdata)  
				            {  
				            printf("Gagal Membaca Pesan\n");  
				            return;  
				         } 
			}	
			memset(control_info, 0,  MAX_INFO);
			read(control_sockinit, control_info, MAX_INFO);
			fputs(control_info,stdout);
			close(data_sockinit);
	
		}


		if(strncmp(ftp_cmd,"quit",4)==0) exit(0);

		
	}
	
	
	return 0;
}
